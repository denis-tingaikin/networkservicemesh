syntax = "proto3";

package forwarderregistrar;

import "ptypes/empty/empty.proto";

// DataplaneRegistrationRequest is sent by the forwarder to NSM
// to advertise itself and inform NSM about the location of the forwarder socket
// and its initially supported parameters.
message DataplaneRegistrationRequest {
  string forwarder_name = 1;
  string forwarder_socket = 2;
}

message DataplaneRegistrationReply {
  bool registered = 1;
}

service DataplaneRegistration {
    rpc RequestDataplaneRegistration (DataplaneRegistrationRequest) returns (DataplaneRegistrationReply);
    // RequestLiveness is a stream initiated by NSM to inform the forwarder that NSM is still alive and
    // no re-registration is required. Detection a failure on this "channel" will mean
    // that NSM is gone and the forwarder needs to start re-registration logic.
    rpc RequestLiveness (stream google.protobuf.Empty) returns (stream google.protobuf.Empty);
}

// DataplaneUnRegistrationRequest is sent by the forwarder to NSM
// to remove itself from the list of available forwarders.
message DataplaneUnRegistrationRequest {
    string forwarder_name = 1;
  }
  
  message DataplaneUnRegistrationReply {
    bool un_registered = 1;
  }
  
  service DataplaneUnRegistration {
      rpc RequestDataplaneUnRegistration (DataplaneUnRegistrationRequest) returns (DataplaneUnRegistrationReply);
  }
